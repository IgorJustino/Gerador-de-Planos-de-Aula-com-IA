const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config();

if (!process.env.GEMINI_API_KEY) {
  console.error('‚ùå ERRO CR√çTICO: GEMINI_API_KEY n√£o configurada!');
  console.error('üí° Configure a vari√°vel de ambiente GEMINI_API_KEY no Render.');
  throw new Error('GEMINI_API_KEY n√£o configurada nas vari√°veis de ambiente');
}

// cliente
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
console.log('‚úÖ Google Gemini AI inicializado com sucesso');

/**
 * Gera um plano de aula completo usando Google Gemini
 * @param {Object} dados - Dados para gera√ß√£o do plano
 * @param {string} dados.tema - Tema da aula
 * @param {string} dados.nivelEnsino - N√≠vel de ensino (Ex: "Ensino Fundamental I")
 * @param {number} dados.duracaoMinutos - Dura√ß√£o em minutos
 * @param {string} dados.codigoBNCC - C√≥digo da habilidade BNCC (opcional)
 * @param {string} dados.observacoes - Observa√ß√µes adicionais (opcional)
 * @returns {Promise<Object>} Plano de aula gerado
 */
async function gerarPlanoDeAula(dados) {
  const startTime = Date.now();

  try {
    console.log('ü§ñ [Gemini] Iniciando gera√ß√£o do plano...');
    
    // Escolher o modelo (pode ser configurado no .env)
    const modelName = process.env.GEMINI_MODEL || 'gemini-2.5-flash-preview-05-20';
    console.log(`ü§ñ [Gemini] Usando modelo: ${modelName}`);
    
    const model = genAI.getGenerativeModel({ model: modelName });

    // Construir o prompt estruturado
    const prompt = construirPrompt(dados);
    console.log('ü§ñ [Gemini] Prompt constru√≠do, enviando requisi√ß√£o...');

    // Configurar par√¢metros de gera√ß√£o
    const generationConfig = {
      temperature: 0.8,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 4096,
    };

    // Gerar conte√∫do
    console.log('ü§ñ [Gemini] Aguardando resposta da API...');
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig,
    });
    console.log('ü§ñ [Gemini] Resposta recebida!');

    const response = result.response;
    const texto = response.text();

    const planoGerado = processarRespostaGemini(texto);

    const tempoExecucao = Date.now() - startTime;
    const tokensUsados = response.usageMetadata?.totalTokenCount || 0;

    return {
      sucesso: true,
      plano: planoGerado,
      metadados: {
        modeloUsado: modelName,
        tokensUtilizados: tokensUsados,
        tempoGeracaoMs: tempoExecucao,
      },
    };
  } catch (erro) {
    const tempoExecucao = Date.now() - startTime;

    console.error('‚ùå [Gemini] Erro ao gerar plano:', erro);
    console.error('‚ùå [Gemini] Mensagem:', erro.message);
    console.error('‚ùå [Gemini] Stack:', erro.stack);
    
    // Mensagens de erro mais espec√≠ficas
    let mensagemErro = erro.message;
    
    if (erro.message?.includes('API key')) {
      mensagemErro = 'Chave da API Gemini inv√°lida ou n√£o configurada. Verifique GEMINI_API_KEY nas vari√°veis de ambiente.';
    } else if (erro.message?.includes('quota')) {
      mensagemErro = 'Cota da API Gemini excedida. Aguarde alguns minutos e tente novamente.';
    } else if (erro.message?.includes('timeout') || erro.message?.includes('ETIMEDOUT')) {
      mensagemErro = 'Timeout ao conectar com a API Gemini. Tente novamente.';
    }

    return {
      sucesso: false,
      erro: mensagemErro,
      metadados: {
        tempoGeracaoMs: tempoExecucao,
        erroOriginal: erro.message,
      },
    };
  }
}

/**
 * Constr√≥i o prompt otimizado para o Gemini
 */
function construirPrompt(dados) {
  const { tema, nivelEnsino, duracaoMinutos, codigoBNCC, observacoes } = dados;

  return `
Voc√™ √© um especialista em pedagogia e cria√ß√£o de planos de aula inovadores e alinhados √† BNCC (Base Nacional Comum Curricular).

**TAREFA:**
Crie um plano de aula completo e criativo sobre o tema "${tema}" para ${nivelEnsino}, com dura√ß√£o de ${duracaoMinutos} minutos.
${codigoBNCC ? `\nHabilidade BNCC: ${codigoBNCC}` : ''}
${observacoes ? `\nObserva√ß√µes do professor: ${observacoes}` : ''}

**ESTRUTURA OBRIGAT√ìRIA (4 PARTES):**

---

## 1. INTRODU√á√ÉO L√öDICA
Crie uma introdu√ß√£o criativa, motivadora e engajante que capture a aten√ß√£o dos alunos. Use linguagem acess√≠vel, perguntas instigantes, exemplos do cotidiano ou situa√ß√µes-problema interessantes. Inclua emojis para tornar o texto mais visual.

---

## 2. OBJETIVO DE APRENDIZAGEM
Defina 1 objetivo claro e mensur√°vel, alinhado √† BNCC. Use verbos da Taxonomia de Bloom (compreender, identificar, analisar, criar, etc.). Seja espec√≠fico sobre o que o aluno ser√° capaz de fazer ao final da aula.

---

## 3. PASSO A PASSO DA ATIVIDADE
Divida a aula em etapas numeradas e detalhadas:
- Etapa 1: Introdu√ß√£o/Contextualiza√ß√£o (tempo estimado)
- Etapa 2: Explora√ß√£o/Desenvolvimento (tempo estimado)
- Etapa 3: Atividade Pr√°tica/Aplica√ß√£o (tempo estimado)
- Etapa 4: Fechamento/Avalia√ß√£o (tempo estimado)

Seja espec√≠fico: quais materiais usar, como organizar a turma, perguntas para fazer, exemplos concretos.

---

## 4. RUBRICA DE AVALIA√á√ÉO
Crie crit√©rios claros de avalia√ß√£o com 4 n√≠veis:
- ‚úÖ Excelente (9-10 pontos)
- ‚úÖ Bom (7-8 pontos)
- ‚úÖ Satisfat√≥rio (5-6 pontos)
- ‚ö†Ô∏è Precisa Melhorar (abaixo de 5 pontos) + sugest√£o de a√ß√£o pedag√≥gica

Para cada n√≠vel, descreva comportamentos observ√°veis e habilidades demonstradas.

---

**DIRETRIZES:**
- Seja criativo e original
- Use linguagem clara e objetiva
- Adapte a complexidade ao n√≠vel de ensino
- Sugira atividades pr√°ticas e interativas
- Inclua possibilidades de diferencia√ß√£o pedag√≥gica
- Garanta que as 4 partes sejam claramente separadas com t√≠tulos em mai√∫sculas

**FORMATO DE RESPOSTA:**
Responda EXATAMENTE neste formato, usando os t√≠tulos em mai√∫sculas:

INTRODU√á√ÉO L√öDICA
[seu texto aqui]

OBJETIVO DE APRENDIZAGEM
[seu texto aqui]

PASSO A PASSO DA ATIVIDADE
[seu texto aqui]

RUBRICA DE AVALIA√á√ÉO
[seu texto aqui]
`.trim();
}

/**
 * Processa a resposta do Gemini e extrai as 4 partes do plano
 */
function processarRespostaGemini(texto) {
  // Padr√µes para identificar cada se√ß√£o
  const secoes = {
    introducaoLudica: extrairSecao(texto, 'INTRODU√á√ÉO L√öDICA', 'OBJETIVO DE APRENDIZAGEM'),
    objetivoAprendizagem: extrairSecao(texto, 'OBJETIVO DE APRENDIZAGEM', 'PASSO A PASSO'),
    passoAPasso: extrairSecao(texto, 'PASSO A PASSO', 'RUBRICA DE AVALIA√á√ÉO'),
    rubricaAvaliacao: extrairSecao(texto, 'RUBRICA DE AVALIA√á√ÉO', null),
  };

  // Validar se todas as partes foram encontradas
  const partesVazias = Object.entries(secoes).filter(([_, valor]) => !valor.trim());

  if (partesVazias.length > 0) {
    console.warn('‚ö†Ô∏è Algumas se√ß√µes n√£o foram encontradas:', partesVazias.map(([k]) => k));
  }

  return {
    introducaoLudica: secoes.introducaoLudica.trim() || 'N√£o foi poss√≠vel gerar esta se√ß√£o.',
    objetivoAprendizagem: secoes.objetivoAprendizagem.trim() || 'N√£o foi poss√≠vel gerar esta se√ß√£o.',
    passoAPasso: secoes.passoAPasso.trim() || 'N√£o foi poss√≠vel gerar esta se√ß√£o.',
    rubricaAvaliacao: secoes.rubricaAvaliacao.trim() || 'N√£o foi poss√≠vel gerar esta se√ß√£o.',
  };
}

/**
 * Extrai uma se√ß√£o espec√≠fica do texto
 */
function extrairSecao(texto, inicioMarcador, fimMarcador) {
  const regexInicio = new RegExp(`${inicioMarcador}[:\\s]*`, 'i');
  const matchInicio = texto.match(regexInicio);

  if (!matchInicio) {
    return '';
  }

  const posicaoInicio = matchInicio.index + matchInicio[0].length;

  let posicaoFim;
  if (fimMarcador) {
    const regexFim = new RegExp(`${fimMarcador}[:\\s]*`, 'i');
    const matchFim = texto.slice(posicaoInicio).match(regexFim);
    posicaoFim = matchFim ? posicaoInicio + matchFim.index : texto.length;
  } else {
    posicaoFim = texto.length;
  }

  return texto.slice(posicaoInicio, posicaoFim).trim();
}

/**
 * Testa a conex√£o com a API Gemini
 */
async function testarConexao() {
  try {
    const modelName = process.env.GEMINI_MODEL || 'gemini-2.5-flash-preview-05-20';
    const model = genAI.getGenerativeModel({ model: modelName });
    const result = await model.generateContent('Responda apenas: OK');
    const texto = result.response.text();

    return {
      sucesso: true,
      mensagem: 'Conex√£o com Gemini estabelecida ‚úÖ',
      resposta: texto,
    };
  } catch (erro) {
    return {
      sucesso: false,
      mensagem: 'Erro ao conectar com Gemini ‚ùå',
      erro: erro.message,
    };
  }
}

module.exports = {
  gerarPlanoDeAula,
  testarConexao,
};
